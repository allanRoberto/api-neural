# Setup - Analizer Master + Estelar

## üìÑ .env (Copie e configure)

```env
# ========== AMBIENTE ==========
ENVIRONMENT=development
API_HOST=0.0.0.0
API_PORT=8000

# ========== MONGODB ==========
MONGODB_HOST=localhost
MONGODB_PORT=27017
MONGODB_USER=
MONGODB_PASSWORD=
MONGODB_DATABASE=roulette_db
MONGODB_COLLECTION_SPINS=spins
MONGODB_MAX_POOL_SIZE=10
MONGODB_MIN_POOL_SIZE=1

# ========== CORS ==========
CORS_ORIGINS=["http://localhost:3000","http://localhost:8080","http://127.0.0.1:3000"]

# ========== CACHE ==========
CACHE_ENABLED=true
CACHE_TTL_SECONDS=300

# ========== PADR√ïES ==========
MASTER_JANELA_SIZE=3
MASTER_MIN_SUPPORT=0.5
MASTER_DECAY_FACTOR=0.95

ESTELAR_JANELA_SIZE=3
ESTELAR_MIN_SIMILARITY=0.6

CHAIN_MAX_LENGTH=4
CHAIN_MIN_SUPPORT=2
CHAIN_RECENT_WINDOW=30

# ========== ENSEMBLE (PESOS) ==========
W_MASTER=1.0
W_ESTELAR=1.0
W_CHAIN=0.8
W_TEMPORAL=0.8

# ========== TEMPORAL ==========
TEMPORAL_DEFAULT_INTERVAL=5
TEMPORAL_DEFAULT_DAYS_BACK=30
TEMPORAL_MAX_DAYS_BACK=365

# ========== LIMITES ==========
MAX_SUGGESTIONS=18
MIN_SUGGESTIONS=3
DEFAULT_SUGGESTIONS=6
MIN_HISTORY_SIZE=10
MAX_HISTORY_SIZE=500

# ========== LOGGING ==========
LOG_LEVEL=INFO
LOG_FILE=api.log
```

---

## üìã README.md

```markdown
# üé∞ Analizer Master + Estelar

API para an√°lise comportamental de roleta usando padr√µes Master, Estelar e Chain.

## üèóÔ∏è Arquitetura

### Padr√µes de An√°lise (Separados)

1. **MASTER** - Padr√µes exatos e recorrentes
2. **ESTELAR** - Equival√™ncias subjetivas
3. **CHAIN** - An√°lise contextual de fluxo
4. **TEMPORAL** - Filtro por hor√°rio

### Tecnologias

- **FastAPI** - Framework web ass√≠ncrono
- **MongoDB** - Banco de dados (Motor driver)
- **Pydantic** - Valida√ß√£o de dados
- **Python 3.11+**

---

## üöÄ Instala√ß√£o

### 1. Clonar reposit√≥rio

```bash
git clone <repo-url>
cd analizer-master-estelar
```

### 2. Criar ambiente virtual

```bash
python -m venv venv

# Linux/Mac
source venv/bin/activate

# Windows
venv\Scripts\activate
```

### 3. Instalar depend√™ncias

```bash
pip install -r requirements.txt
```

### 4. Configurar .env

```bash
cp .env.example .env
nano .env  # Edite com suas configura√ß√µes
```

### 5. Iniciar MongoDB

```bash
# Linux
sudo systemctl start mongod

# Mac
brew services start mongodb-community

# Docker
docker run -d -p 27017:27017 --name mongodb mongo:latest
```

### 6. Executar aplica√ß√£o

```bash
# Desenvolvimento (com auto-reload)
uvicorn main:app --reload --port 8000

# Ou usar o pr√≥prio main.py
python main.py

# Produ√ß√£o (m√∫ltiplos workers)
uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4
```

---

## üì° Endpoints

### Health Check

```bash
GET /health
GET /ping
```

### Hist√≥rico

```bash
# Buscar √∫ltimos N n√∫meros
GET /api/historico/{roulette_id}?limit=500

# Hist√≥rico detalhado
GET /api/historico/{roulette_id}/detailed?limit=100
```

### An√°lises Individuais

```bash
# An√°lise MASTER apenas
GET /api/analise/{roulette_id}/master

# An√°lise ESTELAR apenas
GET /api/analise/{roulette_id}/estelar

# An√°lise CHAIN apenas
GET /api/analise/{roulette_id}/chain

# An√°lise completa (todos)
GET /api/analise/{roulette_id}/completa
```

### Sugest√µes

```bash
# Sugest√µes combinadas
GET /api/sugestao/{roulette_id}?quantidade=6

# Com configura√ß√µes espec√≠ficas
GET /api/sugestao/{roulette_id}?quantidade=9&usar_master=true&usar_estelar=true&usar_chain=true

# Com filtro temporal
GET /api/sugestao/{roulette_id}?usar_temporal=true&horario=14:30&intervalo_minutos=10&dias_retroativos=30
```

---

## üìä Estrutura MongoDB

### Cole√ß√£o: `spins`

```json
{
  "_id": ObjectId("..."),
  "roulette_id": "pragmatic-brazilian-roulette",
  "number": 13,
  "timestamp": ISODate("2025-10-17T14:30:00Z"),
  "round_id": "abc123"
}
```

### √çndices Criados Automaticamente

```javascript
// Composto para consultas temporais
{roulette_id: 1, timestamp: -1}

// Para filtro por n√∫mero
{roulette_id: 1, number: 1}

// Unicidade
{roulette_id: 1, round_id: 1} // UNIQUE
```

---

## üß™ Testes

### Executar todos os testes

```bash
pytest tests/ -v
```

### Testes espec√≠ficos

```bash
# Testar padr√£o Master
pytest tests/test_patterns/test_master.py -v

# Testar rotas
pytest tests/test_routes/ -v

# Com cobertura
pytest tests/ --cov=. --cov-report=html
```

### Testar API manualmente

```bash
# Health check
curl http://localhost:8000/health

# Buscar hist√≥rico
curl http://localhost:8000/api/historico/pragmatic-brazilian-roulette?limit=10

# Gerar sugest√µes
curl "http://localhost:8000/api/sugestao/pragmatic-brazilian-roulette?quantidade=6"
```

---

## üîß Desenvolvimento

### Estrutura de Pastas

```
analizer-master-estelar/
‚îú‚îÄ‚îÄ main.py              # Aplica√ß√£o principal
‚îú‚îÄ‚îÄ config/              # Configura√ß√µes
‚îú‚îÄ‚îÄ patterns/            # Padr√µes (Master, Estelar, Chain)
‚îú‚îÄ‚îÄ services/            # Servi√ßos de neg√≥cio
‚îú‚îÄ‚îÄ routes/              # Rotas da API
‚îú‚îÄ‚îÄ models/              # Modelos Pydantic
‚îú‚îÄ‚îÄ utils/               # Utilit√°rios
‚îî‚îÄ‚îÄ tests/               # Testes
```

### Adicionar novo padr√£o

1. Criar classe em `patterns/novo_padrao.py`
2. Herdar de `BasePattern`
3. Implementar m√©todo `analyze()`
4. Adicionar ao `EnsembleAnalyzer`
5. Criar testes em `tests/test_patterns/`

### C√≥digo de exemplo

```python
# patterns/novo_padrao.py
from patterns.base import BasePattern

class NovoPattern(BasePattern):
    def analyze(self, history: List[int]) -> Dict:
        # Sua l√≥gica aqui
        return {
            "candidatos": [...],
            "scores": {...},
            "metadata": {...}
        }
```

---

## üìù Logs

### Localiza√ß√£o

```bash
# Ver logs em tempo real
tail -f api.log

# Buscar erros
grep "ERROR" api.log

# √öltimas 100 linhas
tail -n 100 api.log
```

### Formato

```
2025-10-17 14:30:00 - main - INFO - ‚úÖ MongoDB conectado
2025-10-17 14:30:01 - routes.sugestao - INFO - ‚û°Ô∏è GET /api/sugestao/pragmatic-brazilian-roulette
2025-10-17 14:30:01 - routes.sugestao - INFO - ‚¨ÖÔ∏è Status: 200 - Tempo: 0.15s
```

---

## üîí Produ√ß√£o

### Vari√°veis de ambiente importantes

```env
ENVIRONMENT=production
API_HOST=0.0.0.0
API_PORT=8000
MONGODB_USER=seu_usuario
MONGODB_PASSWORD=senha_segura
CORS_ORIGINS=["https://seudominio.com"]
```

### Executar com Gunicorn

```bash
pip install gunicorn

gunicorn main:app \
  --workers 4 \
  --worker-class uvicorn.workers.UvicornWorker \
  --bind 0.0.0.0:8000 \
  --access-logfile - \
  --error-logfile -
```

### Docker (opcional)

```dockerfile
FROM python:3.11-slim

WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
```

```bash
docker build -t analizer-api .
docker run -p 8000:8000 --env-file .env analizer-api
```

---

## üêõ Troubleshooting

### MongoDB n√£o conecta

```bash
# Verificar se MongoDB est√° rodando
sudo systemctl status mongod

# Testar conex√£o
mongosh --eval "db.adminCommand('ping')"

# Ver logs do MongoDB
sudo tail -f /var/log/mongodb/mongod.log
```

### Erro de importa√ß√£o

```bash
# Verificar se venv est√° ativado
which python

# Reinstalar depend√™ncias
pip install -r requirements.txt --force-reinstall
```

### CORS error

Adicione seu dom√≠nio em `.env`:
```env
CORS_ORIGINS=["http://localhost:3000","https://seusite.com"]
```

---

## üìö Documenta√ß√£o API

Ap√≥s iniciar a aplica√ß√£o, acesse:

- **Swagger UI**: http://localhost:8000/docs
- **ReDoc**: http://localhost:8000/redoc
- **OpenAPI JSON**: http://localhost:8000/openapi.json

---

## ü§ù Contribuindo

1. Fork o projeto
2. Crie uma branch (`git checkout -b feature/nova-funcionalidade`)
3. Commit suas mudan√ßas (`git commit -m 'Adiciona nova funcionalidade'`)
4. Push para a branch (`git push origin feature/nova-funcionalidade`)
5. Abra um Pull Request

---

## üìÑ Licen√ßa

Projeto propriet√°rio - Todos os direitos reservados

---

## üë• Contato

Para d√∫vidas ou suporte, contate o desenvolvedor.

---

**Vers√£o**: 1.0.0  
**√öltima atualiza√ß√£o**: 17/10/2025
```

---

## üéØ Comandos R√°pidos

```bash
# Criar estrutura de pastas
mkdir -p config patterns services routes models utils middleware tests scripts

# Criar arquivos __init__.py
touch config/__init__.py patterns/__init__.py services/__init__.py routes/__init__.py models/__init__.py utils/__init__.py middleware/__init__.py tests/__init__.py

# Executar aplica√ß√£o
python main.py

# Ou com uvicorn
uvicorn main:app --reload

# Executar testes
pytest tests/ -v

# Formatar c√≥digo
black . --line-length 100

# Verificar estilo
flake8 . --max-line-length 100

# Verificar tipos
mypy .
```

---

## üì¶ requirements.txt completo

```txt
# FastAPI e servidor
fastapi==0.104.1
uvicorn[standard]==0.24.0
python-multipart==0.0.6

# MongoDB
motor==3.3.2
pymongo==4.6.0

# Valida√ß√£o e configura√ß√£o
pydantic==2.5.0
pydantic-settings==2.1.0
python-dotenv==1.0.0

# Utilit√°rios
python-dateutil==2.8.2

# Desenvolvimento
pytest==7.4.3
pytest-asyncio==0.21.1
pytest-cov==4.1.0
httpx==0.25.2
black==23.12.0
flake8==6.1.0
mypy==1.7.1

# Produ√ß√£o
gunicorn==21.2.0
```