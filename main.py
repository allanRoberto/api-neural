"""
main.py - Aplica√ß√£o Principal da API Analizer Master + Estelar

Arquitetura:
    - Separa√ß√£o de responsabilidades
    - Inje√ß√£o de depend√™ncias
    - Padr√µes isolados (Master, Estelar, Chain)
    - Configura√ß√µes centralizadas
"""

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
from motor.motor_asyncio import AsyncIOMotorClient
from typing import AsyncGenerator
import logging
import sys
from datetime import datetime

# Importar configura√ß√µes
from config.settings import Settings
from config.database import DatabaseManager

# Importar rotas
from routes import sugestao, historico, analise, health

# Importar middleware customizado
from middleware.logging_middleware import LoggingMiddleware
from middleware.error_handler import error_handler_middleware

# ========== CONFIGURA√á√ÉO DE LOGGING ==========
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('api.log')
    ]
)
logger = logging.getLogger(__name__)

# ========== CARREGAR CONFIGURA√á√ïES ==========
settings = Settings()

# ========== GERENCIADOR DE BANCO DE DADOS ==========
db_manager = DatabaseManager(settings)

# ========== LIFESPAN (STARTUP/SHUTDOWN) ==========
@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator:
    """
    Gerencia o ciclo de vida da aplica√ß√£o
    - Startup: Conecta ao MongoDB
    - Shutdown: Fecha conex√µes
    """
    # ===== STARTUP =====
    logger.info("üöÄ Iniciando aplica√ß√£o Analizer Master + Estelar...")
    
    try:
        # Conectar ao MongoDB
        await db_manager.connect()
        
        # Verificar conex√£o
        if await db_manager.ping():
            logger.info("‚úÖ MongoDB conectado com sucesso")
        else:
            logger.error("‚ùå Falha na conex√£o com MongoDB")
            raise Exception("N√£o foi poss√≠vel conectar ao MongoDB")
        
        # Criar √≠ndices necess√°rios
        await db_manager.create_indexes()
        logger.info("‚úÖ √çndices MongoDB criados/verificados")
        
        # Injetar depend√™ncias na aplica√ß√£o
        app.state.db = db_manager.get_database()
        app.state.settings = settings
        
        logger.info(f"‚úÖ Aplica√ß√£o iniciada na porta {settings.API_PORT}")
        logger.info(f"üìä Ambiente: {settings.ENVIRONMENT}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")
        raise
    
    yield
    
    # ===== SHUTDOWN =====
    logger.info("üîÑ Encerrando aplica√ß√£o...")
    
    try:
        await db_manager.disconnect()
        logger.info("‚úÖ MongoDB desconectado com sucesso")
    except Exception as e:
        logger.error(f"‚ùå Erro ao desconectar MongoDB: {e}")
    
    logger.info("üëã Aplica√ß√£o encerrada")

# ========== CRIAR APLICA√á√ÉO FASTAPI ==========
app = FastAPI(
    title="Analizer Master + Estelar API",
    description="""
    API para an√°lise comportamental de roleta usando padr√µes Master, Estelar e Chain.
    
    ## M√≥dulos:
    - **MASTER**: An√°lise de padr√µes exatos e recorrentes
    - **ESTELAR**: An√°lise de equival√™ncias subjetivas
    - **CHAIN**: An√°lise contextual e din√¢mica de fluxo
    - **TEMPORAL**: Filtro por hor√°rio em dados hist√≥ricos
    
    ## Endpoints Principais:
    - `/api/sugestao/{roulette_id}` - Gerar sugest√µes
    - `/api/historico/{roulette_id}` - Buscar hist√≥rico
    - `/api/analise/{roulette_id}` - An√°lise detalhada
    - `/health` - Status da aplica√ß√£o
    """,
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs" if settings.ENVIRONMENT != "production" else None,
    redoc_url="/redoc" if settings.ENVIRONMENT != "production" else None,
)

# ========== CONFIGURAR CORS ==========
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ========== MIDDLEWARE CUSTOMIZADO ==========
app.add_middleware(LoggingMiddleware)
app.middleware("http")(error_handler_middleware)

# ========== INCLUIR ROTAS ==========
app.include_router(
    sugestao.router,
    prefix="/api/sugestao",
    tags=["Sugest√µes"],
)

app.include_router(
    historico.router,
    prefix="/api/historico",
    tags=["Hist√≥rico"],
)

app.include_router(
    analise.router,
    prefix="/api/analise",
    tags=["An√°lise"],
)

app.include_router(
    health.router,
    prefix="",
    tags=["Health"],
)

# ========== ROTA RAIZ ==========
@app.get("/", tags=["Root"])
async def root():
    """
    Endpoint raiz - Informa√ß√µes da API
    """
    return {
        "app": "Analizer Master + Estelar",
        "version": "1.0.0",
        "status": "online",
        "timestamp": datetime.now().isoformat(),
        "environment": settings.ENVIRONMENT,
        "endpoints": {
            "docs": "/docs",
            "redoc": "/redoc",
            "health": "/health",
            "sugestao": "/api/sugestao/{roulette_id}",
            "historico": "/api/historico/{roulette_id}",
            "analise": "/api/analise/{roulette_id}",
        },
        "padroes_disponiveis": [
            "MASTER - Padr√µes exatos",
            "ESTELAR - Equival√™ncias subjetivas",
            "CHAIN - An√°lise contextual",
            "TEMPORAL - Filtro por hor√°rio"
        ]
    }

# ========== TRATAMENTO DE EXCE√á√ïES GLOBAIS ==========
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """
    Tratador global de exce√ß√µes
    """
    logger.error(f"‚ùå Erro n√£o tratado: {exc}", exc_info=True)
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": str(exc) if settings.ENVIRONMENT != "production" else "Erro interno do servidor",
            "timestamp": datetime.now().isoformat(),
        }
    )

# ========== EVENTOS CUSTOMIZADOS ==========
@app.on_event("startup")
async def log_startup():
    """
    Log adicional na inicializa√ß√£o
    """
    logger.info("=" * 60)
    logger.info("  ANALIZER MASTER + ESTELAR API")
    logger.info("=" * 60)
    logger.info(f"  Vers√£o: 1.0.0")
    logger.info(f"  Ambiente: {settings.ENVIRONMENT}")
    logger.info(f"  MongoDB: {settings.MONGODB_HOST}:{settings.MONGODB_PORT}")
    logger.info(f"  Database: {settings.MONGODB_DATABASE}")
    logger.info("=" * 60)

# ========== MAIN (para execu√ß√£o direta) ==========
if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "main:app",
        host=settings.API_HOST,
        port=settings.API_PORT,
        reload=settings.ENVIRONMENT == "development",
        log_level="info",
    )