"""
patterns/master.py

Padr√£o MASTER - An√°lise de padr√µes exatos e recorrentes

O MASTER busca sequ√™ncias que J√Å OCORRERAM no hist√≥rico e identifica
quais n√∫meros vieram em seguida nessas ocorr√™ncias anteriores.

Caracter√≠sticas:
- Trabalha com janelas de 2-5 n√∫meros consecutivos
- Aplica decaimento temporal (ocorr√™ncias recentes valem mais)
- Identifica rela√ß√µes: vizinhos, espelhos, terminais, soma
- Pontua candidatos baseado na for√ßa das rela√ß√µes
"""

from typing import List, Dict, Tuple
from collections import defaultdict, Counter
import logging

from patterns.base import BasePattern, PatternResult
from utils.helpers import (
    get_vizinhos,
    get_espelho,
    get_terminal,
    get_familia_terminal,
    get_soma_digitos,
    get_numeros_mesma_soma,
    sao_vizinhos,
    encontrar_sequencia,
)

logger = logging.getLogger(__name__)


class MasterPattern(BasePattern):
    """
    Padr√£o MASTER - Busca padr√µes exatos que se repetem
    
    Exemplo de uso:
        master = MasterPattern(config={
            'janela_min': 2,
            'janela_max': 4,
            'decay_factor': 0.95,
            'min_support': 2
        })
        
        resultado = master.analyze(history)
        print(resultado.get_top_n(6))  # Top 6 candidatos
    """
    
    def __init__(self, config: Dict = None):
        """
        Inicializa o padr√£o MASTER
        
        Args:
            config: Configura√ß√µes do padr√£o
                - janela_min: Tamanho m√≠nimo da janela (default: 2)
                - janela_max: Tamanho m√°ximo da janela (default: 4)
                - decay_factor: Fator de decaimento temporal (default: 0.95)
                - min_support: M√≠nimo de ocorr√™ncias para considerar (default: 2)
        """
        super().__init__(config)
        
        self.janela_min = self.get_config_value('janela_min', 2)
        self.janela_max = self.get_config_value('janela_max', 4)
        self.decay_factor = self.get_config_value('decay_factor', 0.95)
        self.min_support = self.get_config_value('min_support', 2)
    
    def analyze(self, history: List[int]) -> PatternResult:
        """
        Analisa o hist√≥rico buscando padr√µes exatos
        
        Args:
            history: Lista de n√∫meros (mais recente no √≠ndice 0)
        
        Returns:
            PatternResult com candidatos e scores
        """
        logger.info(f"üîç MASTER: Analisando {len(history)} n√∫meros")
        
        # Validar hist√≥rico
        if not self.validate_history(history, min_size=10):
            logger.warning("‚ö†Ô∏è MASTER: Hist√≥rico insuficiente")
            return PatternResult(
                candidatos=[],
                scores={},
                metadata={'error': 'Hist√≥rico insuficiente'},
                pattern_name='MASTER'
            )
        
        # Inicializar scores
        scores = defaultdict(float)
        
        # Metadados para debug
        metadata = {
            'janelas_analisadas': 0,
            'padroes_encontrados': 0,
            'relacoes_detectadas': {},
        }
        
        # Analisar diferentes tamanhos de janela
        for janela_size in range(self.janela_min, self.janela_max + 1):
            padroes = self._buscar_padroes_exatos(
                history,
                janela_size,
                scores,
                metadata
            )
        
        # Aplicar rela√ß√µes (vizinhos, espelhos, terminais)
        self._aplicar_relacoes(history, scores, metadata)
        
        # Normalizar scores
        scores_normalizados = self.normalize_scores(dict(scores))
        
        # Ordenar candidatos por score
        candidatos = sorted(
            scores_normalizados.keys(),
            key=lambda n: scores_normalizados[n],
            reverse=True
        )
        
        logger.info(
            f"‚úÖ MASTER: {len(candidatos)} candidatos, "
            f"{metadata['padroes_encontrados']} padr√µes"
        )
        
        return PatternResult(
            candidatos=candidatos,
            scores=scores_normalizados,
            metadata=metadata,
            pattern_name='MASTER'
        )
    
    def _buscar_padroes_exatos(
        self,
        history: List[int],
        janela_size: int,
        scores: Dict[int, float],
        metadata: Dict
    ) -> int:
        """
        Busca padr√µes exatos de um tamanho espec√≠fico de janela
        
        Args:
            history: Hist√≥rico completo
            janela_size: Tamanho da janela a buscar
            scores: Dicion√°rio de scores (ser√° atualizado)
            metadata: Metadados (ser√° atualizado)
        
        Returns:
            Quantidade de padr√µes encontrados
        """
        # Sequ√™ncia atual (mais recente)
        if len(history) < janela_size:
            return 0
        
        sequencia_atual = history[:janela_size]
        metadata['janelas_analisadas'] += 1
        
        # Buscar essa sequ√™ncia no resto do hist√≥rico
        ocorrencias = encontrar_sequencia(
            history[janela_size:],  # Ignorar a pr√≥pria sequ√™ncia
            sequencia_atual
        )
        
        if len(ocorrencias) < self.min_support:
            return 0
        
        # Para cada ocorr√™ncia passada, ver o que veio depois
        padroes_encontrados = 0
        
        for idx_ocorrencia in ocorrencias:
            # √çndice real no hist√≥rico (compensar offset)
            idx_real = idx_ocorrencia + janela_size
            
            # Verificar se h√° um n√∫mero depois
            if idx_real + 1 < len(history):
                numero_seguinte = history[idx_real + 1]
                
                # Calcular peso com decaimento temporal
                # Quanto mais antiga a ocorr√™ncia, menor o peso
                peso = self._calcular_peso_temporal(idx_real, len(history))
                
                # Adicionar score ao n√∫mero seguinte
                scores[numero_seguinte] += peso
                padroes_encontrados += 1
        
        if padroes_encontrados > 0:
            metadata['padroes_encontrados'] += padroes_encontrados
            logger.debug(
                f"   Janela {janela_size}: {sequencia_atual} ‚Üí "
                f"{padroes_encontrados} ocorr√™ncias"
            )
        
        return padroes_encontrados
    
    def _calcular_peso_temporal(self, posicao: int, total: int) -> float:
        """
        Calcula peso baseado na posi√ß√£o temporal
        
        Posi√ß√µes mais recentes (menor √≠ndice) t√™m peso maior
        
        Args:
            posicao: Posi√ß√£o no hist√≥rico (0 = mais recente)
            total: Tamanho total do hist√≥rico
        
        Returns:
            Peso entre 0 e 1
        """
        # Normalizar posi√ß√£o (0 = mais recente, 1 = mais antigo)
        pos_normalizada = posicao / total
        
        # Aplicar decaimento exponencial
        peso = self.decay_factor ** pos_normalizada
        
        return peso
    
    def _aplicar_relacoes(
        self,
        history: List[int],
        scores: Dict[int, float],
        metadata: Dict
    ):
        """
        Aplica b√¥nus baseado em rela√ß√µes entre n√∫meros
        
        Rela√ß√µes consideradas:
        - Vizinhos na roda
        - Espelhos
        - Fam√≠lia terminal
        - Mesma soma de d√≠gitos
        
        Args:
            history: Hist√≥rico completo
            scores: Dicion√°rio de scores (ser√° atualizado)
            metadata: Metadados (ser√° atualizado)
        """
        if len(history) < 1:
            return
        
        numero_mais_recente = history[0]
        relacoes = defaultdict(int)
        
        # 1. VIZINHOS
        vizinhos = get_vizinhos(numero_mais_recente, distancia=2)
        for viz in vizinhos:
            if 0 <= viz <= 36:
                scores[viz] += 0.5
                relacoes['vizinhos'] += 1
        
        # 2. ESPELHO
        espelho = get_espelho(numero_mais_recente)
        if espelho != -1:
            scores[espelho] += 0.8
            relacoes['espelhos'] += 1
        
        # 3. FAM√çLIA TERMINAL
        terminal = get_terminal(numero_mais_recente)
        familia = get_familia_terminal(terminal)
        for num in familia:
            if num != numero_mais_recente:
                scores[num] += 0.3
                relacoes['terminais'] += 1
        
        # 4. MESMA SOMA DE D√çGITOS
        nums_mesma_soma = get_numeros_mesma_soma(numero_mais_recente)
        for num in nums_mesma_soma[:5]:  # Limitar a 5
            scores[num] += 0.2
            relacoes['soma'] += 1
        
        # 5. N√öMEROS DO CONTEXTO RECENTE (√∫ltimos 10)
        contexto = history[:10]
        frequencia = Counter(contexto)
        for num, freq in frequencia.most_common(5):
            if num != numero_mais_recente:
                scores[num] += 0.1 * freq
                relacoes['contexto'] += 1
        
        metadata['relacoes_detectadas'] = dict(relacoes)
    
    def get_analise_detalhada(self, history: List[int]) -> Dict:
        """
        Retorna an√°lise detalhada do padr√£o MASTER
        
        √ötil para debugging e visualiza√ß√£o
        
        Args:
            history: Lista de n√∫meros
        
        Returns:
            Dicion√°rio com an√°lise completa
        """
        resultado = self.analyze(history)
        
        return {
            'pattern': 'MASTER',
            'historico_size': len(history),
            'ultimos_10': history[:10],
            'top_candidatos': resultado.get_top_n(10),
            'total_candidatos': len(resultado.candidatos),
            'metadata': resultado.metadata,
            'config': {
                'janela_min': self.janela_min,
                'janela_max': self.janela_max,
                'decay_factor': self.decay_factor,
                'min_support': self.min_support,
            }
        }